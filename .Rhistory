demo()
#------------------------------CHAPTER 1--------------------------------------------------------------------
# Core data structures
# Vectors - One dimensional
#
# Atomic Vectors are HOMOgenous - and are generally what people mean when they are reffering to Vectors
vec <- c(1:9)
# Test for Atomic Vector
is.atomic(vec)
# Atomic Vectors have a set TYPE
is.logical()
is.double()
is.integer()
is.numeric() # <- TRUE for int OR double
is.character()
# Above is the coercion order, if you combine atomic vectors of different types they will be coerced to the lowest possible
# shared state
# Lists are HETEROgenous
lis <- list(1,"abc",c(3:8),list("donkey", 36.8))
#Test for List
is.list(lis)
#
# you can convert a list to an atomic vector (coercion rules will be applied where necessary)
lis_as_atom_vec <- unlist(lis)
# is.vector() should NOT be used, tests for a more specific thing.
vec[[2]]
vec
vec[2]
lis[[2]]
lis[2]
fac_face <- factor(c("f","a","c","t","o","r"))
fac_face[1:4]
fac_face[[1:4]]
fac_face[[1:4,drop=T]]
fac_face[[1:4,drop=F]]
fac_vec <- factor(vec)
fac_vec[[1:4]]
fac_vec[[1:4, drop=T]]
fac_vec[[1]]
fac_vec[[1, drop=T]]
fac_vec[[1, drop=F]]
lookup(fac_vec)
order(fac_vec)
order(fac_face)
fac_face_2 <- fac_face[order(fac_face)]
fac_face_2
install.packages('lobstr')
library(lobstr)
obj_addr(fac_face)
library(PresidentialDebate2012)
?debate_data
?word_percentage_function
word_percentage_function(c("war","obama"))
word_percentage_function(c("a","the","of"))
check(my_path)
library(devtools)
library(roxygen2)
library(usethis)
library(dplyr)
library(tidyr)
library(tidytext)
library(ggthemes)
check(my_path)
my_dir <- "/home/crummers/Documents/uniWork/MATH_513/coursework"
package_name <- "PresidentialDebate2012"
my_path <- file.path(my_dir,package_name)
check(my_path)
roxygenize(my_path)
document(my_path)
install(my_path)
check(my_path)
install(my_path)
library(PresidentialDebate2012)
library(devtools)
library(roxygen2)
library(usethis)
library(dplyr)
library(tidyr)
library(tidytext)
library(ggthemes)
my_dir <- "/home/crummers/Documents/uniWork/MATH_513/coursework"
package_name <- "PresidentialDebate2012"
my_path <- file.path(my_dir,package_name)
install(my_path)
document(my_path)
check(my_path)
roxygenize(my_path)
document(my_path)
check(my_path)
roxygenize(my_path)
document(my_path)
check(my_path)
install(my_path)
rstudioapi::restartSession()
PresidentialDebate2012::word_percentage_function("obama")
PresidentialDebate2012::word_percentage_function(c("obama","economy"))
PresidentialDebate2012::word_percentage_data
install.packages("ISLR")
library(ISLR)
library(tidyr)
library(tidyverse)
library(readr)
readr::write_csv2(ISLR::Default, path = "/home/crummers/Documents/uniWork/MATH501/knn_data.csv")
readr::write_csv(ISLR::Default, path = "/home/crummers/Documents/uniWork/MATH501/knn_data.csv")
library(dplyr)
ISLR::Default$balance %>% max()
ISLR::Default$income %>% max()
norm_balance = ISLR::Default$balance / max(ISLR::Default$balance)
norm_balance
ISLR::Default$balance[622]
norm_income = ISLR::Default$income / max(ISLR::Default$income)
ISLR::Default$balance %>% max()
ISLR::Default$income %>% max()
out = ISLR::Default
out <- cbind(out,norm_balance, norm_income)
View(out)
readr::write_csv(out, path = "/home/crummers/Documents/uniWork/MATH501/knn_data.csv")
setwd('/home/crummers/Documents/uniWork/int_fin/rpp')
source('~/Documents/uniWork/int_fin/rpp/cpi_data.R')
fr_rppp
plot(fr_rpp$rppp, gr_rpp$rppp)
plot(fr_rppp$rppp, gr_rpp$rppp)
cor(fr_rppp$rppp, gr_rpp$rppp)
get_short_rpp <- function(base_year,end_year,foreign_spot,foreign_cpi){
years <- c((base_year+1):end_year)
delta_spot <- unlist(purrr::map(years,function(x) log(get_rate(foreign_spot,x)) - log(get_rate(foreign_spot,(x-1))) ))
home_inflation <- unlist(purrr::map(years,function(x) log(get_rate(us_cpi_annual,x)) - log(get_rate(us_cpi_annual,(x-1))) ))
f_inflation <- unlist(purrr::map(years,function(x) log(get_rate(foreign_cpi,x)) - log(get_rate(foreign_cpi,(x-1))) ))
rppp <- delta_spot - delta_inflation
absolute_error <- abs(rppp)
out <- as.data.frame(cbind(years,home_inflation,f_inflation,delta_inflation,rppp, absolute_error))
return(out)
}
get_short_rpp(2000,2018,eu_spot_rates,fr_cpi_annual)
get_short_rpp <- function(base_year,end_year,foreign_spot,foreign_cpi){
years <- c((base_year+1):end_year)
delta_spot <- unlist(purrr::map(years,function(x) log(get_rate(foreign_spot,x)) - log(get_rate(foreign_spot,(x-1))) ))
home_inflation <- unlist(purrr::map(years,function(x) log(get_rate(us_cpi_annual,x)) - log(get_rate(us_cpi_annual,(x-1))) ))
f_inflation <- unlist(purrr::map(years,function(x) log(get_rate(foreign_cpi,x)) - log(get_rate(foreign_cpi,(x-1))) ))
delta_inflation <- home_inflation - f_inflation
rppp <- delta_spot - delta_inflation
absolute_error <- abs(rppp)
out <- as.data.frame(cbind(years,home_inflation,f_inflation,delta_inflation,rppp, absolute_error))
return(out)
}
get_short_rpp(2000,2018,eu_spot_rates,fr_cpi_annual)
